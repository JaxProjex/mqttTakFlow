[
    {
        "id": "d4a1b9bfee315e97",
        "type": "tab",
        "label": "mqttTakFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4291870be91210dc",
        "type": "mqtt in",
        "z": "d4a1b9bfee315e97",
        "name": "mqtt in",
        "topic": "tak/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "951886331beda1f7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "b2863f5ee8fd867e",
                "0cefeb6304b268f2"
            ]
        ]
    },
    {
        "id": "1505332df4e2f154",
        "type": "debug",
        "z": "d4a1b9bfee315e97",
        "name": "debug json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 140,
        "wires": []
    },
    {
        "id": "b2863f5ee8fd867e",
        "type": "debug",
        "z": "d4a1b9bfee315e97",
        "name": "debug mqtt in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 120,
        "wires": []
    },
    {
        "id": "0cefeb6304b268f2",
        "type": "function",
        "z": "d4a1b9bfee315e97",
        "name": "mqtt json (spots)",
        "func": "const short = 10000;\nconst cinco = 5 * 60 * 1000;\nconst diez = 2 * cinco;\nconst stale = new Date(Date.now() + short).toISOString();\n\n//\"-65281\" //purple\n//\"-8947849\" //grey\n//\"-65536\" //red\n//\"-256\" //yellow\n//\"-16711936\" //green\n//\"-16776961\" //blue\nvar color = \"-65281\"; \nvar name = msg.payload.name;\nvar lat = msg.payload.lat;\nvar lon = msg.payload.lon;\n\n\nmsg.payload = {\n    \"event\": {\n        \"_attributes\": {\n            \"version\": \"2.0\",\n            \"uid\": \"\"+ name +\"\",\n            \"type\": \"b-m-p-s-m\",\n            \"how\": \"h-g-i-g-o\",\n            \"time\": new Date(Date.now()).toISOString(),\n            \"start\": new Date(Date.now()).toISOString(),\n            \"stale\": stale,\n        },\n        \"point\": {\n            \"_attributes\": {\n                \"lat\": \"\"+ lat +\"\",\n                \"lon\": \"\"+ lon + \"\",\n                \"hae\": \"0.0\",\n                \"ce\": \"9999999.0\",\n                \"le\": \"9999999.0\"\n            }\n        },\n        \"detail\": {\n            \"usericon\": {\n                \"_attributes\": {\n                    \"iconsetpath\": \"COT_MAPPING_SPOTMAP/b-m-p-s-m/\"+ color +\"\",\n                },\n            },\n            \"contact\": {\n                \"_attributes\": {\n                \"callsign\": \"\"+ name +\"\",\n                }\n            },\n            \"color\": {\n                \"_attributes\": {\n                \"argb\": \"\"+ color +\"\"\n                },\n            },\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "1505332df4e2f154",
                "a888d493bcf2e367"
            ]
        ]
    },
    {
        "id": "a888d493bcf2e367",
        "type": "tak",
        "z": "d4a1b9bfee315e97",
        "name": "TAK",
        "x": 1350,
        "y": 280,
        "wires": [
            [
                "2312e498da91efdd",
                "b1e1150ea9a17c23"
            ],
            [],
            []
        ]
    },
    {
        "id": "02bc4c44d2247a68",
        "type": "tcp out",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "host": "10.237.104.20",
        "port": "8089",
        "beserver": "client",
        "base64": false,
        "end": false,
        "tls": "1c52b35895c06e7e",
        "x": 1650,
        "y": 340,
        "wires": []
    },
    {
        "id": "ffd76640be049628",
        "type": "mqtt out",
        "z": "d4a1b9bfee315e97",
        "name": "mqtt out",
        "topic": "tak/device1",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "951886331beda1f7",
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "a03dfbb366e431f4",
        "type": "inject",
        "z": "d4a1b9bfee315e97",
        "name": "example 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "tak",
        "payload": "{\"id\":\"4321\",\"name\":\"test-4321\",\"lat\":\"10.1010\",\"lon\":\"30.3030\"}",
        "payloadType": "json",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "ffd76640be049628"
            ]
        ]
    },
    {
        "id": "b9d763de251e0508",
        "type": "mqtt out",
        "z": "d4a1b9bfee315e97",
        "name": "mqtt out",
        "topic": "tak/device2",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "951886331beda1f7",
        "x": 580,
        "y": 420,
        "wires": []
    },
    {
        "id": "ef7ab1eb9558ed75",
        "type": "comment",
        "z": "d4a1b9bfee315e97",
        "name": "USE TO TEST MQTT",
        "info": "format of msg.payload should be in JSON with \"uniqueId\", \"name\", \"lat\", \"lon\" key value pairs to pass.\ntopic should be traccar/*deviceNameOrIdentifier",
        "x": 460,
        "y": 280,
        "wires": []
    },
    {
        "id": "6d374011209e851f",
        "type": "inject",
        "z": "d4a1b9bfee315e97",
        "name": "example 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "tak",
        "payload": "{\"id\":\"1234\",\"name\":\"test-1234\",\"lat\":\"20.2020\",\"lon\":\"40.4040\"}",
        "payloadType": "json",
        "x": 200,
        "y": 420,
        "wires": [
            [
                "b9d763de251e0508"
            ]
        ]
    },
    {
        "id": "b1e1150ea9a17c23",
        "type": "udp out",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "addr": "239.2.3.1",
        "iface": "",
        "port": "6969",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "multi",
        "x": 1630,
        "y": 280,
        "wires": []
    },
    {
        "id": "2312e498da91efdd",
        "type": "debug",
        "z": "d4a1b9bfee315e97",
        "name": "debug xml",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 160,
        "wires": []
    },
    {
        "id": "e6da45b6abf07060",
        "type": "comment",
        "z": "d4a1b9bfee315e97",
        "name": "README",
        "info": "SETUP NODE-RED:\n\n-https://nodered.org/docs/getting-started/\n\n-options include installing node-red on your local PC, a Raspberry Pi or similar single board computer or mini PC, deploying node-red on a cloud server or virtual private server (VPS), Docker Container, or local virtual environment. After installing node-red you should be able to go to the node-red dashboard at http://node-red-ip-address:1880 you may have to open appropriate ports (1880) to allow devices to access the node-red dashboard.\n\n-ensure you install the \"node-red-contrib-tak\" node. If not there should be a prompt when you import mqttTakFlow in Node-Red that there are nodes that need to be installed and will automatically install them for you if you allow. In the event that isnt the case, in Node-Red: Menu (3 horizontal lines) > Manage palette > Install > Search \"node-red-contrib-tak\" > Install > Install\n\n----------------------------------------------\n\nIMPORT .JSON FLOW TO NODE RED:\n\n-in GitHub: click on \"mqttTakFlow.json\" > click on the download icon \"Download raw file\" > note where the \"mqttTakFlow.json\" file downloaded to, default is in your Downloads folder.\n\n-in Node-Red: click on menu icon (3 horizontal lines top right) > click on \"Import\" > click on \"select a file to import\" > go to Downloads folder and click on \"mqttTakFlow.json\" > Upload > Import\n\nALTERNATIVELY..\n\n-you can just copy the whole \"mqttTakFlow.json\" code from GitHub and paste it into the Node-Red Import Clipboard.\n\n-----------------------------------------------\n\nMQTT PUB PAYLOAD EXAMPLE (JSON):\n\n    {\n\n        \"id\": \"1234\",\n    \n        \"name\": \"test-1234\",\n    \n        \"lat\": \"20.2020\",\n    \n        \"lon\": \"40.4040\"\n    \n    }\n\n-------------------------------------------\n\nMQTT PUB PAYLOAD:\n\n-the \"id\" key gets used as the uid for the CoT msg so only one Marker populates on the map for your mqtt device.\n\n-the \"name\" key gets used as the name of the CoT marker on TAK.\n\n-the \"lat\" and \"lon\" key is used to plot the latitude and longitude coordinates, however you get the lat and lon of your mqtt device (gps module, network gps, virtual gps, etc.) be sure to pass them seperately as a \"lat\" and \"lon\" key.\n\n--------------------------------------------\n\nMQTT IN NODE:\n\n-configure the \"mqtt in\" node of the necessary subscribed topic and the authentication needed (if necessary).\n\n-------------------------------------------------\n\nTROUBLESHOOTING / KNOWN ISSUES:\n\n-in the event the Node-Red service explodes and you lose connection to the Node-Red UI and cant reconnect, you may need to restart your Node-Red service\n\n$ sudo service node-red restart",
        "x": 580,
        "y": 120,
        "wires": []
    },
    {
        "id": "ae4b407c919012df",
        "type": "comment",
        "z": "d4a1b9bfee315e97",
        "name": "configure TCP (TAKServer)",
        "info": "if using SSL/TLS ensure you upload your certificates, key and input your passphrase.\nCertificates (.pem) and key (.key) can be found in your TAKServers directory where it stores all TAK client certificates.\nDefualt SSL/TLS port is 8089.\n",
        "x": 1650,
        "y": 400,
        "wires": []
    },
    {
        "id": "c448b6eed4434d9b",
        "type": "comment",
        "z": "d4a1b9bfee315e97",
        "name": "configure mqtt in / auth",
        "info": "add your mqtt broker/server ip and port.\nadd your subscribed topics.\nmqtt data must be in json format. view the ping node from the examples.",
        "x": 800,
        "y": 240,
        "wires": []
    },
    {
        "id": "951886331beda1f7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "10.237.104.23",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1c52b35895c06e7e",
        "type": "tls-config",
        "name": "node-red to takserver",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "node-red.pem",
        "keyname": "node-red.key",
        "caname": "ca.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]
