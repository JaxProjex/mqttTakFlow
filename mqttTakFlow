[
    {
        "id": "d4a1b9bfee315e97",
        "type": "tab",
        "label": "mqttTakFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4291870be91210dc",
        "type": "mqtt in",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "topic": "tak/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "951886331beda1f7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 810,
        "y": 280,
        "wires": [
            [
                "b2863f5ee8fd867e",
                "0cefeb6304b268f2"
            ]
        ]
    },
    {
        "id": "1505332df4e2f154",
        "type": "debug",
        "z": "d4a1b9bfee315e97",
        "name": "debug json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 180,
        "wires": []
    },
    {
        "id": "b2863f5ee8fd867e",
        "type": "debug",
        "z": "d4a1b9bfee315e97",
        "name": "debug mqtt in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 160,
        "wires": []
    },
    {
        "id": "0cefeb6304b268f2",
        "type": "function",
        "z": "d4a1b9bfee315e97",
        "name": "mqtt json (spots)",
        "func": "/* \nExample JSON containing the keys & values for popular cursor on target CoT \nfields, including time, point latitude & longitude, type, and more.\n*/\n\n/* Stale is Date.now() + miliseconds. \n Ruberic: 1000 Miliseconds in 1 Second\n Example: 5 Minutes, in Miliseconds, is 300000\n   (5 x 60 * 1000 )\n*/\nconst short = 10000;\nconst cinco = 5 * 60 * 1000;\nconst diez = 2 * cinco;\nconst stale = new Date(Date.now() + short).toISOString();\n\n//var speed = parseInt(msg.payload[0].speed);\n//var motion = msg.payload[0].attributes.motion;\n//var status = msg.payload[1].status;\n\n//var battery =  msg.payload[0].attributes.batteryLevel;\nvar color = \"-65536\";\nvar name = msg.payload.name;\nvar lat = msg.payload.lat;\nvar lon = msg.payload.lon;\n//var alt = msg.payload[0].altitude;\n\n/*\nNot all fields are required for display on most TAK Products, other systems may \nhave different requirements. YMMV.\n*/\n\nmsg.payload = {\n    \"event\": {\n        \"_attributes\": {\n            \"version\": \"2.0\",\n            \"uid\": \"\"+ name +\"\",\n            \"type\": \"b-m-p-s-m\",\n            \"how\": \"m-g\",\n            \"time\": new Date(Date.now()).toISOString(),\n            \"start\": new Date(Date.now()).toISOString(),\n            \"stale\": stale,\n        },\n        \"point\": {\n            \"_attributes\": {\n                \"lat\": \"\"+ lat +\"\",\n                \"lon\": \"\"+ lon + \"\",\n                \"hae\": \"0.0\",\n                \"ce\": \"9999999.0\",\n                \"le\": \"9999999.0\"\n            }\n        },\n        \"detail\": {\n            \"usericon\": {\n                \"_attributes\": {\n                    \"iconsetpath\": \"COT_MAPPING_SPOTMAP/b-m-p-s-m/\"+ color +\"\",\n                },\n            },\n            \"contact\": {\n                \"_attributes\": {\n                \"callsign\": \"\"+ name +\"\",\n                }\n            },\n            /* \"__group\": {\n                \"_attributes\": {\n                \"role\": \"Team Member\",\n                \"name\": \"Red\",\n                }\n            }, */\n            \"color\": {\n                \"_attributes\": {\n                \"argb\": \"\"+ color +\"\",\n                \"test\": \"test\",\n                },\n            },\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "1505332df4e2f154",
                "a888d493bcf2e367"
            ]
        ]
    },
    {
        "id": "a888d493bcf2e367",
        "type": "tak",
        "z": "d4a1b9bfee315e97",
        "name": "TAK",
        "x": 1210,
        "y": 320,
        "wires": [
            [
                "02bc4c44d2247a68",
                "2312e498da91efdd"
            ],
            [],
            []
        ]
    },
    {
        "id": "02bc4c44d2247a68",
        "type": "tcp out",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "host": "10.237.104.20",
        "port": "8089",
        "beserver": "client",
        "base64": false,
        "end": false,
        "tls": "1c52b35895c06e7e",
        "x": 1450,
        "y": 340,
        "wires": []
    },
    {
        "id": "ffd76640be049628",
        "type": "mqtt out",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "topic": "tak/device1",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "951886331beda1f7",
        "x": 590,
        "y": 200,
        "wires": []
    },
    {
        "id": "a03dfbb366e431f4",
        "type": "inject",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "tak",
        "payload": "{\"id\":\"4321\",\"name\":\"test-4321\",\"lat\":\"10.111\",\"lon\":\"30.333\"}",
        "payloadType": "json",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "ffd76640be049628"
            ]
        ]
    },
    {
        "id": "b9d763de251e0508",
        "type": "mqtt out",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "topic": "tak/device2",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "951886331beda1f7",
        "x": 590,
        "y": 360,
        "wires": []
    },
    {
        "id": "34f7e32fc68dc269",
        "type": "comment",
        "z": "d4a1b9bfee315e97",
        "name": "Example 1",
        "info": "format of msg.payload should be in JSON with \"uniqueId\", \"name\", \"lat\", \"lon\" key value pairs to pass.\ntopic should be traccar/*deviceNameOrIdentifier\n\nadd device in traccar server GUI, using the uniqueId and name that the MQTT client publishes.",
        "x": 220,
        "y": 160,
        "wires": []
    },
    {
        "id": "ef7ab1eb9558ed75",
        "type": "comment",
        "z": "d4a1b9bfee315e97",
        "name": "Example 2",
        "info": "format of msg.payload should be in JSON with \"uniqueId\", \"name\", \"lat\", \"lon\" key value pairs to pass.\ntopic should be traccar/*deviceNameOrIdentifier",
        "x": 220,
        "y": 320,
        "wires": []
    },
    {
        "id": "6d374011209e851f",
        "type": "inject",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "tak",
        "payload": "{\"id\":\"1234\",\"name\":\"1234\",\"lat\":\"20.222\",\"lon\":\"40.444\"}",
        "payloadType": "json",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "b9d763de251e0508"
            ]
        ]
    },
    {
        "id": "b1e1150ea9a17c23",
        "type": "udp out",
        "z": "d4a1b9bfee315e97",
        "name": "",
        "addr": "239.2.3.1",
        "iface": "",
        "port": "6969",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "multi",
        "x": 1430,
        "y": 300,
        "wires": []
    },
    {
        "id": "2312e498da91efdd",
        "type": "debug",
        "z": "d4a1b9bfee315e97",
        "name": "debug xml",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 200,
        "wires": []
    },
    {
        "id": "951886331beda1f7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "10.237.104.23",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1c52b35895c06e7e",
        "type": "tls-config",
        "name": "node-red to takserver",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "node-red.pem",
        "keyname": "node-red.key",
        "caname": "ca.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]
